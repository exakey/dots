local icons = {
        Array         = { icon = "󰅪", hl = "DropBarIconKindArray" },
        Boolean       = { icon = "", hl = "@lsp.type.boolean" },
        Class         = { icon = "", hl = "@lsp.type.class" },
        Component     = { icon = "󰅴", hl = "DropBarIconKindFunction" },
        Constant      = { icon = "", hl = "@lsp.type.constant" },
        Constructor   = { icon = "", hl = "@lsp.type.constructor" },
        Enum          = { icon = "", hl = "@lsp.type.enum" },
        EnumMember    = { icon = "", hl = "@lsp.type.enumMember" },
        Event         = { icon = "", hl = "@lsp.type.event" },
        Field         = { icon = "", hl = "@field" },
        File          = { icon = "", hl = "DropBarIconKindFile" },
        Fragment      = { icon = "󰅴", hl = "DropBarIconKindConstant" },
        Function      = { icon = "", hl = "@lsp.type.function" },
        Interface     = { icon = "", hl = "@lsp.type.interface" },
        Key           = { icon = "", hl = "@lsp.type.keyword" },
        Macro         = { icon = "", hl = "@lsp.type.macro" },
        Method        = { icon = "", hl = "@lsp.type.method" },
        Module        = { icon = "", hl = "@module" },
        Namespace     = { icon = "󰅪", hl = "@lsp.type.namespace" },
        Null          = { icon = "󰢤", hl = "@lsp.type.number" },
        Number        = { icon = "", hl = "@lsp.type.number" },
        Object        = { icon = "", hl = "@lsp.type.interface" },
        Operator      = { icon = "", hl = "@lsp.type.operator" },
        Package       = { icon = "", hl = "DropBarIconKindPackage" },
        Parameter     = { icon = " ", hl = "@lsp.type.parameter" },
        Property      = { icon = "", hl = "@lsp.type.property" },
        StaticMethod  = { icon = " ", hl = "@lsp.type.method" },
        String        = { icon = "󰉾", hl = "@string" },
        Struct        = { icon = "", hl = "@lsp.type.struct" },
        TypeAlias     = { icon = " ", hl = "@lsp.type.typeAlias" },
        TypeParameter = { icon = "", hl = "@lsp.type.TypeParameter" },
        Variable      = { icon = "", hl = "@lsp.type.variable" },
}

return {
        "hedyhli/outline.nvim",
        event = "LspAttach",
        cmd   = { "Outline", "OutlineOpen" },
        keys  = { { "<A-o>", "<cmd>Outline<cr>", desc = "Outline", mode = { "n" } } },
        opts  = {
                outline_window = {
                        position                = "right",
                        split_command           = nil,
                        width                   = 25,
                        relative_width          = true,
                        auto_close              = false,
                        auto_jump               = false,
                        jump_highlight_duration = 300,
                        center_on_jump          = true,
                        show_numbers            = false,
                        show_relative_numbers   = false,
                        wrap                    = false,
                        show_cursorline         = true,
                        hide_cursor             = false,
                        focus_on_open           = false,
                        winhl                   = "",
                },
                outline_items  = {
                        show_symbol_details    = true,
                        show_symbol_lineno     = false,
                        highlight_hovered_item = true,
                        auto_set_cursor        = false,
                        auto_update_events     = {
                                follow = { "CursorMoved" },
                                items  = { "InsertLeave", "WinEnter", "BufEnter", "BufWinEnter", "TabEnter", "BufWritePost" },
                        },
                },
                guides         = {
                        enabled = true,
                        markers = {
                                bottom   = "",
                                middle   = "",
                                vertical = "",
                        },
                },
                symbol_folding = {
                        autofold_depth = 1,
                        auto_unfold    = {
                                hovered = true,
                                only    = true,
                        },
                        markers        = { "", "" },
                },
                preview_window = {
                        auto_preview          = false,
                        open_hover_on_preview = false,
                        width                 = 40,
                        min_width             = 30,
                        relative_width        = true,
                        height                = 50,
                        min_height            = 10,
                        relative_height       = true,
                        border                = "single",
                        winhl                 = "NormalFloat:",
                        winblend              = vim.g.winblend,
                        live                  = true,
                },
                keymaps        = {
                        show_help        = "?",
                        close            = { "<Esc>", "q" },
                        goto_location    = "<Cr>",
                        peek_location    = "o",
                        goto_and_close   = "<S-Cr>",
                        restore_location = "<C-g>",
                        hover_symbol     = "<C-space>",
                        toggle_preview   = "P",
                        rename_symbol    = "r",
                        code_actions     = "a",
                        fold             = "h",
                        unfold           = "l",
                        fold_toggle      = "<Tab>",
                        fold_toggle_all  = "<S-Tab>",
                        fold_all         = "H",
                        unfold_all       = "L",
                        fold_reset       = "R",
                        down_and_jump    = "<C-j>",
                        up_and_jump      = "<C-k>",
                },
                providers      = {
                        priority = { "lsp", "markdown", "norg" },
                        lsp      = {
                                blacklist_clients = {},
                        },
                        markdown = {
                                filetypes = { "markdown" },
                        },
                },
                symbols        = {
                        filter       = nil,
                        icon_fetcher = nil,
                        icon_source  = nil,
                        icons        = icons
                        -- icons        = require("core.icons").symbol_kinds
                },
        },
}
